一、创建版本库
 1.初始化git仓库
	git init
 2.将readme.txt添加到仓库
	git add readme.txt
 3.用命令git commit告诉Git，把文件提交到仓库
	git commit -m "提交日志"
二、时光穿梭机
 1.查看状态
	1.查看仓库当前状态
		git status
	2.查看readme.txt修改内容
		git diff readme.txt
 2.版本回退
	1.git log命令显示从最近到最远的提交日志
		git log  //git log --pretty=oneline
	2.HEAD^回退到上个版本
		git reset --hard HEAD^
		//注：，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，
		//也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，
		//上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
		git reset --hard 744f63b  //重新回到GPL版本
		
	3.git reflog查看之前所有命令找到commit id
		git reflog
	
		小结
	现在总结一下：
    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
 3.工作区和暂存区
	工作区（Working Directory）：就是你在电脑里能看到的目录
	版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		版本库里有一个暂存区stage(index),并且有第一个创建的分支master
		
	把文件往Git版本库里添加的时候，是分两步执行的：
		第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
		第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
		因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
		你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
 4.管理修改
	查看工作区和版本库里最新的版本的区别
	git diff HEAD -- readme.txt
 5.撤销修改
	1.还原对工作区的修改
		git checkout -- readme.txt
			命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
			一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
			一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
			总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
		注：没有--  git checkout为切换到另一分支
	2.撤销暂存区的修改
		git reset HEAD readme.txt
		git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
 6.删除文件
	先从工作区删除
		rm file1.txt
	再从版本库中删除
		git rm file1.txt
	然后提交
		git commit -m "remove test.txt"
三、远程仓库
 1.创建远程仓库
	创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
		如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
	ssh-keygen -t rsa -C "youremail@example.com"
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
 2.添加远程库
	1.登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
	2.在Repository name填入myProject，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
	3.git remote add origin https://github.com/loveliukai/myProject.git关联远程仓库  git remote add origin git@github.com:loveliukai/myProject.git(SSH协议，速度更快)
	4.git push -u origin master 推送本地分支到远程库
	
	
	小结
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！	

 3.从远程库克隆
	创建远程库后使用git clone https://github.com/loveliukai/gitskills.git创建本地库  git clone git@github.com:loveliukai/gitskills.git

